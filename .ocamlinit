open Unfoldings
open Occurrence_net
open Product
open Examples
open Prod1
open Prod2
open Prod3
open Prod4
open Prod5
open Prod6
open Prod7
open Prod8;;
open Prod8sys;;

open Ltl
open String_product
open String_ltl
open StringLtl

let f = F (And (AP "u1", X (AP "u1")))
let ap = APSet.of_list [ "u1"; "t1" ]
let gnba = gnba_of_formula ap f;;

open String_product
open String_ltl
open StringPTNetProduct
open StringNetfullsync
open TesterLtl

let f = F (And (AP "u1", X (AP "u1")))
let gnba = StringNetfullsync.gnba_of_formula prod7 f;;

open StringProductUnfolder;;

let r = test Prod7.prod7 (d_compare sl_compare) [] 50;;
Plot.plot_test_result r ();;

let u' = Unfolder.OccurrenceNet.reversible r.prefix;;

Plot.plot_unfold u' ();;

open UnfoldTester.TesterLtl;;
open UnfoldTester.TesterLtl.Formula;;

let t1 = {Unfolder.OccurrenceNet.Token.name = 0; history = []; label = "t1"};;
let t2 = {Unfolder.OccurrenceNet.Token.name = 4;  history =  [[`T "c"; `Idle]]; label = "t2"};;
let f = F (And (AP t2, F (X (AP t1))));;
let gnba = UnfoldTester.gnba_of_formula u' f;;

open StringNetfullsync;;
open Unfolder.OccurrenceNet;;
open UnfoldTester;;
open Result;;

let r = StringProductUnfolder.test prod8 (d_compare sl_compare) [] 9999999999;;
let u = r.prefix;;
let g = Unfolder.OccurrenceNet.find_event_by_id 8 u;;
Unfolder.OccurrenceNet.reverse g u;;
Plot.plot_unfold u ();;

let k = List.nth (find_tokens_by_id 0 u) 0;;
let n = List.nth (find_tokens_by_id 0 u) 1;;
let l = List.nth (find_tokens_by_id 8 u) 0;;
let o = find_token_by_id 3 u;;
let p = List.nth (find_tokens_by_id 8 u) 1;;
let m = find_token_by_id 9 u;;

let f = G(F(AP p));;
assert(is_ok (test ~stutter:true u f));;

let f = G(If(AP p, F(AP o)));;
assert(is_ok (test ~stutter:true u f));;

let f = G(If(AP p, F(AP n)));;
assert(is_error (test ~stutter:true u f));;

let d = Unfolder.OccurrenceNet.find_event_by_id 3 u;;
Unfolder.OccurrenceNet.reverse d u;;

(* the second component cannot roll back to the initial state, even if revD is added *)
let f = G(If(AP p, F(AP n)));;
assert(is_error (test ~stutter:true u f));; (* violated by (G;revG)omega *)

(* the product cannot be in an inconsistent state *)
let f = G(Or(Not (AP p), Not (AP k)));;
assert(is_ok (test ~stutter:true u f));;