open Unfoldings
open Occurrence_net
open Product
open Examples
open Prod1
open Prod2
open Prod3
open Prod4
open Prod5
open Prod6
open Prod7
open Prod8;;
open Prod8sys;;
open Prod9;;

open Ltl
open String_product
open String_ltl
open StringNetfullsync;;
open StringNetfullsync.TesterLtl;;
open StringProductUnfolder;;
open Unfolder;;
open OccurrenceNet;;
open UnfoldTester;;
open Result;;


let r = StringProductUnfolder.test prod9 (d_compare sl_compare) [] 99;;
let u = r.prefix;;
let t1u1 = find_event_by_id 3 u;;
reverse t1u1 u;;
let b = List.nth (find_tokens_by_label "b" u) 1;;
let a = List.nth (find_tokens_by_label "a" u) 0;;
let f = G(If(AP b, F(AP a)));;
let gnba = gnba_of_formula u (Not f);;

let l = List.map (NetGNBA.StateSet.elements)(NetGNBA.PowerStateSet.elements gnba.fin);;
let ls = NetGNBA.PowerStateSet.elements gnba.fin;;
let s1 = List.nth ls 0;;
let s2 = List.nth ls 1;;
let l1 = List.nth l 0;;
let l2 = List.nth l 1;;

let a1 = List.filter (fun b -> OccurrenceNet.TransSet.exists (fun t -> not (NetGNBA.StateSet.is_empty (gnba.func b t))) u.transitions) l1;;
let a2 = List.filter (fun b -> OccurrenceNet.TransSet.exists (fun t -> not (NetGNBA.StateSet.is_empty (gnba.func b t))) u.transitions) l2;;

List.map string_of_tokenformulaset l1;;
List.map string_of_tokenformulaset l2;;

open NetGNBA;;
let is = StateSet.choose gnba.init;;

let gnba' = StateSet.fold (fun b acc -> remove_state acc b) (StateSet.diff s1 gnba.init) gnba;;
let gnba' = StateSet.fold (fun b acc -> remove_state acc b) (StateSet.diff s2 gnba.init) gnba';;
